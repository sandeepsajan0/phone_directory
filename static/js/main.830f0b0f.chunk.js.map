{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","phone","temp_name","temp_phone","clicked","AddSubscriber","bind","assertThisInitialized","handleChange","handleSubmit","handleDelete","handleBack","event","console","log","target","setState","defineProperty","value","concat","props1","index","indexOf","splice","_this2","name_list","keys","map","item","react_default","a","createElement","className","style","color","marginLeft","onSubmit","onClick","onChange","type","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.830f0b0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      name:[],\n      phone:[],\n      temp_name:\"\",\n      temp_phone:\"\",\n      clicked:false\n    }\n    this.AddSubscriber = this.AddSubscriber.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleDelete = this.handleDelete.bind(this)\n    this.handleBack = this.handleBack.bind(this)\n  }\n\n  handleChange(event){\n    console.log(event.target.name)\n    this.setState({\n      [event.target.name]:event.target.value\n    })\n  }\n\n  handleSubmit(){\n    this.setState(state =>{\n      const name = state.name.concat(state.temp_name)\n      const phone = state.phone.concat(state.temp_phone)\n      const clicked = false\n      const temp_phone = \"\"\n      const temp_name = \"\"\n      return{\n        name,\n        phone,\n        clicked,\n        temp_name,\n        temp_phone\n      }\n    })\n  }\n\n  handleBack(){\n    this.setState({\n      clicked:false,\n      temp_phone:\"\",\n      temp_name:\"\"\n    })\n  }\n\n  handleDelete(props1){\n    this.setState(state =>{\n      const index = state.phone.indexOf(props1)\n      if(index > -1){\n        state.name.splice(index,1)\n        state.phone.splice(index,1)\n        const name = state.name\n        const phone = state.phone\n        console.log(\"name\",name,state.name, )\n        return{\n          name,\n          phone\n        }\n      }\n    })\n \n  }\n\n\n  AddSubscriber(){\n    this.setState({\n      clicked:true\n        })\n    console.log(\"inside  add\",this.state.clicked)\n  }\n\n  render() {\n    console.log(\"render\",this.state.name, this.state.phone)\n    \n    const name_list = Object.keys(this.state.name).map(item=> <p>{this.state.name[item]}</p>)\n    // const phone_list = Object.keys(this.state.phone).map(item=> <p>{this.state.phone[item]}</p>)\n    return (\n      <div>\n        <div className=\"header\">\n          <h1 style={{color:\"white\"}}> Phone Directory </h1>\n        </div>\n        {this.state.clicked ? (\n          <form style={{marginLeft:\"10px\"}} onSubmit={this.handleSubmit}>\n            <button className=\"button button1\" onClick={this.handleBack}>Back</button>\n            <p> Name: <br />\n            <input name=\"temp_name\" onChange={this.handleChange} type=\"text\" /></p>\n            <p>Phone: <br />\n            <input name=\"temp_phone\" onChange={this.handleChange} type=\"text\" /></p>\n            <h3> Subscriber to be added:</h3>\n            Name: {this.state.temp_name}\n            <br />\n            Phone: {this.state.temp_phone}\n            <br />\n            <input className=\"button\" type=\"submit\" value=\"ADD\"/>\n          </form>\n          ): (\n          <div>\n          <button className=\"button\" onClick={this.AddSubscriber}>ADD</button>\n          <div className=\"container\">\n            <div>\n              <h3>Name</h3>\n              {name_list}\n            </div>\n            <div>\n              <h3>Phone</h3>\n              { (this.state.phone.length >0) ? (\n                this.state.phone.map(item => {return(<p>{item} {\" \"} <button className=\"button button2\" onClick={() => this.handleDelete(item)} >DELETE</button></p>)})\n                ): null\n              }\n            </div>\n          </div>\n          </div>\n          )\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n            {/*<div>\n              <p></p>\n              { for(var i=0;i< {this.state.name}.length,i++){\n              <button onClick={this.handleDelete}>DELETE</button>}\n            }\n            </div>*/}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}